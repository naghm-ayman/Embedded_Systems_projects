/* 
 * File:   application.c
 * Author: NAGHM.A.O
 *
 * Created on 14 March 2024, 20:02
 */

#include "application.h"


dc_motor_t dc_motor_1 = {
  .dc_motor[DC_motor_Pin1].port = PortD_index,
  .dc_motor[DC_motor_Pin1].pin = GPIO_Pin0,
  .dc_motor[DC_motor_Pin1].logic = DC_motor_OFF_status,
  .dc_motor[DC_motor_Pin1].direction = GPIO_Output_direction,
  .dc_motor[DC_motor_Pin2].port = PortD_index,
  .dc_motor[DC_motor_Pin2].pin = GPIO_Pin1,
  .dc_motor[DC_motor_Pin2].logic = DC_motor_OFF_status,
  .dc_motor[DC_motor_Pin2].direction = GPIO_Output_direction
};
dc_motor_t dc_motor_2 = {
  .dc_motor[DC_motor_Pin1].port = PortD_index,
  .dc_motor[DC_motor_Pin1].pin = GPIO_Pin2,
  .dc_motor[DC_motor_Pin1].logic = DC_motor_OFF_status,
  .dc_motor[DC_motor_Pin1].direction = GPIO_Output_direction,
  .dc_motor[DC_motor_Pin2].port = PortD_index,
  .dc_motor[DC_motor_Pin2].pin = GPIO_Pin3,
  .dc_motor[DC_motor_Pin2].logic = DC_motor_OFF_status,
  .dc_motor[DC_motor_Pin2].direction = GPIO_Output_direction
};
chr_lcd_4bit_t lcd_1 = {
    .LCD_rs.port = PortC_index,
    .LCD_rs.pin = GPIO_Pin0,
    .LCD_rs.direction = GPIO_Output_direction,
    .LCD_rs.logic = GPIO_LOW,
    .LCD_en.port = PortC_index,
    .LCD_en.pin = GPIO_Pin1,
    .LCD_en.direction = GPIO_Output_direction,
    .LCD_en.logic = GPIO_LOW,
    .LCD_data[0].port = PortC_index,
    .LCD_data[0].pin = GPIO_Pin2,
    .LCD_data[0].direction = GPIO_Output_direction,
    .LCD_data[0].logic = GPIO_LOW,
    .LCD_data[1].port = PortC_index,
    .LCD_data[1].pin = GPIO_Pin3,
    .LCD_data[1].direction = GPIO_Output_direction,
    .LCD_data[1].logic = GPIO_LOW,
    .LCD_data[2].port = PortC_index,
    .LCD_data[2].pin = GPIO_Pin4,
    .LCD_data[2].direction = GPIO_Output_direction,
    .LCD_data[2].logic = GPIO_LOW,
    .LCD_data[3].port = PortC_index,
    .LCD_data[3].pin = GPIO_Pin5,
    .LCD_data[3].direction = GPIO_Output_direction,
    .LCD_data[3].logic = GPIO_LOW
};

adc_config_t adc1 = {
    .ADC_InterruptHandler = NULL,
    .acquisition_time = ADC_12_TAD,
    .channel_select = ADC_CHANNEL_AN0,
    .conversion_time = ADC_CONVERSION_CLOCK_FOCS_DIV_16,
    .result_format = ADC_RESULT_RIGHT,
    .voltage_refrence = ADC_VOLTAGE_REFRENCE_DISABLE
};

uint16 lm35_res_1, lm35_res_2, lm35_res_1_Celsius_mv = 0, lm35_res_2_Celsius_mv = 0;
uint8 lm35_res_1_txt[7], lm35_res_2_txt[7];

int main() {
    Std_ReturnType ret = E_NOK;
    intialization_fun();
    ret = ADC_Init(&adc1);
    ret = lcd_4bit_intialize(&lcd_1);
    ret = dc_motor_intialization(&dc_motor_1);
    ret = dc_motor_intialization(&dc_motor_2);
    
    ret = lcd_4bit_send_string_pos(&lcd_1, 1,7,"LM35 TEST");
    
     
    ret = lcd_4bit_send_string_pos(&lcd_1, 2, 1, "Temp1: ");
    ret = lcd_4bit_send_string_pos(&lcd_1, 3, 1, "Temp2: ");
    
    
 while(1){
        ret = ADC_GetConversion_Blocking(&adc1, ADC_CHANNEL_AN0, &lm35_res_1);
        ret = ADC_GetConversion_Blocking(&adc1, ADC_CHANNEL_AN1, &lm35_res_2);
        
        lm35_res_1_Celsius_mv = lm35_res_1 * 4.88f; /* 5000(mv) / 1024(10-Bit) => 4.88 */
        lm35_res_2_Celsius_mv = lm35_res_2 * 4.88f; /* 5000(mv) / 1024(10-Bit) => 4.88 */
        
        lm35_res_1_Celsius_mv /= 10; /* The sensitivity of LM35 is 10 mV/degree Celsius */
        lm35_res_2_Celsius_mv /= 10; /* The sensitivity of LM35 is 10 mV/degree Celsius */
        
        ret = conv_short_to_string(lm35_res_1, lm35_res_1_txt);
        ret = conv_short_to_string(lm35_res_2, lm35_res_2_txt);
        
        
        ret = lcd_4bit_send_string_pos(&lcd_1, 2, 8, lm35_res_1_txt);
        ret = lcd_4bit_send_string_pos(&lcd_1, 3, 8, lm35_res_2_txt);
        
       if(lm35_res_1_Celsius_mv > 20){
            ret = dc_motor_move_right(&dc_motor_1);
        }
        else{
            ret = dc_motor_stop(&dc_motor_1);
        }
        
        if(lm35_res_2_Celsius_mv > 25){
            ret = dc_motor_move_right(&dc_motor_2);
        }
        else{
            ret = dc_motor_stop(&dc_motor_2);
        }
  }
     return(EXIT_SUCCESS);

 }
void intialization_fun(void){
    Std_ReturnType ret = E_NOK;
    ret = ADC_Init(&adc1);
    ecu_layer_intialize();
}

