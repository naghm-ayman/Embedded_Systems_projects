/* 
 * File:   application.c
 * Author: NAGHM.A.O
 *
 * Created on 14 March 2024, 20:02
 */

#include "application.h"

void defualt_interrupt_handler(void);

chr_lcd_4bit_t lcd_1 = {
    .LCD_rs.port = PortC_index,
    .LCD_rs.pin = GPIO_Pin0,
    .LCD_rs.direction = GPIO_Output_direction,
    .LCD_rs.logic = GPIO_LOW,
    .LCD_en.port = PortC_index,
    .LCD_en.pin = GPIO_Pin1,
    .LCD_en.direction = GPIO_Output_direction,
    .LCD_en.logic = GPIO_LOW,
    .LCD_data[0].port = PortC_index,
    .LCD_data[0].pin = GPIO_Pin2,
    .LCD_data[0].direction = GPIO_Output_direction,
    .LCD_data[0].logic = GPIO_LOW,
    .LCD_data[1].port = PortC_index,
    .LCD_data[1].pin = GPIO_Pin3,
    .LCD_data[1].direction = GPIO_Output_direction,
    .LCD_data[1].logic = GPIO_LOW,
    .LCD_data[2].port = PortC_index,
    .LCD_data[2].pin = GPIO_Pin4,
    .LCD_data[2].direction = GPIO_Output_direction,
    .LCD_data[2].logic = GPIO_LOW,
    .LCD_data[3].port = PortC_index,
    .LCD_data[3].pin = GPIO_Pin5,
    .LCD_data[3].direction = GPIO_Output_direction,
    .LCD_data[3].logic = GPIO_LOW
};

adc_config_t adc1 = {
    .ADC_InterruptHandler = defualt_interrupt_handler,
    .acquisition_time = ADC_12_TAD,
    .channel_select = ADC_CHANNEL_AN0,
    .conversion_time = ADC_CONVERSION_CLOCK_FOCS_DIV_16,
    .result_format = ADC_RESULT_RIGHT,
    .voltage_refrence = ADC_VOLTAGE_REFRENCE_DISABLE
};

uint16 adc_res_1 = 0, adc_res_2 = 0, adc_res_3 = 0, adc_res_4 = 0;
uint8 adc_res_1_txt[6], adc_res_2_txt[6], adc_res_3_txt[6], adc_res_4_txt[6];
uint8 adc_req = 0;
int main() {
    Std_ReturnType ret = E_NOK;
    intialization_fun();
    ret = ADC_Init(&adc1);
    ret = lcd_4bit_intialize(&lcd_1);
    
    ret = lcd_4bit_send_string_pos(&lcd_1, 1,7,"ADC TEST");
    __delay_ms(1000);
     ret = lcd_4bit_send_comand(&lcd_1, LCD_CLEAR);
     
    ret = lcd_4bit_send_string_pos(&lcd_1, 1, 1, "Pot0: ");
    ret = lcd_4bit_send_string_pos(&lcd_1, 2, 1, "Pot1: ");
    ret = lcd_4bit_send_string_pos(&lcd_1, 3, 1, "Pot2: ");
    ret = lcd_4bit_send_string_pos(&lcd_1, 4, 1, "Pot3: ");
    
 while(1){
      if(0 == adc_req){
            ret = ADC_StartConversion_Interrupt(&adc1, ADC_CHANNEL_AN0);
        }
        else if(1 == adc_req){
            ret = ADC_StartConversion_Interrupt(&adc1, ADC_CHANNEL_AN1);
        }
        else if(2 == adc_req){
            ret = ADC_StartConversion_Interrupt(&adc1, ADC_CHANNEL_AN2);
        }
        else if(3 == adc_req){
            ret = ADC_StartConversion_Interrupt(&adc1, ADC_CHANNEL_AN3);
        }
        else { /* Nothing */ }
        ret = conv_short_to_string(adc_res_1, adc_res_1_txt);
        ret = conv_short_to_string(adc_res_2, adc_res_2_txt);
        ret = conv_short_to_string(adc_res_3, adc_res_3_txt);
        ret = conv_short_to_string(adc_res_4, adc_res_4_txt);
        
        ret = lcd_4bit_send_string_pos(&lcd_1, 1, 7, adc_res_1_txt);
        ret = lcd_4bit_send_string_pos(&lcd_1, 2, 7, adc_res_2_txt);
        ret = lcd_4bit_send_string_pos(&lcd_1, 3, 7, adc_res_3_txt);
        ret = lcd_4bit_send_string_pos(&lcd_1, 4, 7, adc_res_4_txt);
  }
     return(EXIT_SUCCESS);

 }
void intialization_fun(void){
    Std_ReturnType ret = E_NOK;
    ret = ADC_Init(&adc1);
    ecu_layer_intialize();
}
void defualt_interrupt_handler(void){
    Std_ReturnType ret = E_NOK;
    
    if(0 == adc_req){
        ret = ADC_GetConversionResult(&adc1, &adc_res_1);
        adc_req = 1;
    }
    else if(1 == adc_req){
        ret = ADC_GetConversionResult(&adc1, &adc_res_2);
        adc_req = 2;
    }
    else if(2 == adc_req){
        ret = ADC_GetConversionResult(&adc1, &adc_res_3);
        adc_req = 3;
    }
    else if(3 == adc_req){
        ret = ADC_GetConversionResult(&adc1, &adc_res_4);
        adc_req = 0;
    }
    else { /* Nothing */ }
}V